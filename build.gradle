plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'application'
    id "com.github.ben-manes.versions" version "0.20.0"
}

repositories {
    mavenCentral()
}

def jvmVersion = '1.8'
def jdkVersion = System.getProperty('java.version')
def kotlinVersion = '1.3.21'
def loggingVersion = '1.6.25'
def sparkVersion = '2.7.2'
def jacksonVersion = '2.8.11.1'
def slf4jVersion = '1.7.21'
def junitVersion = '5.2.0'

group = 'io.battlesnake'
version = '0.0.1-SNAPSHOT'
description = 'starter-snake-kotlin'
sourceCompatibility = jvmVersion

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "io.github.microutils:kotlin-logging:$loggingVersion"
    implementation "com.sparkjava:spark-core:$sparkVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

// This determines the main() executed with ./gradlew run
application {
    mainClassName = 'io.battlesnake.starter.Snake'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = jvmVersion
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = jvmVersion
    }
}

test {
    useJUnitPlatform()
}

// Include build uberjars in heroku deploy
task stage(dependsOn: ['uberjar', 'uberjarDsl', 'build', 'clean'])
build.mustRunAfter clean

// These tasks create uberjars that run the apps
task uberjar(type: Jar, dependsOn: [':compileJava', ':processResources']) {
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        attributes 'Implementation-Title': 'starter-snake-kotlin',
                'Implementation-Version': version,
                'Built-Date': new Date(),
                'Built-JDK': jdkVersion,
                'Main-Class': 'io.battlesnake.starter.Snake'
    }

    baseName = 'starter-snake-kotlin'
    version = ''

    with jar
}

task uberjarDsl(type: Jar, dependsOn: [':compileJava', ':processResources']) {
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        attributes 'Implementation-Title': 'starter-snake-kotlin-dsl',
                'Implementation-Version': version,
                'Built-Date': new Date(),
                'Built-JDK': jdkVersion,
                'Main-Class': 'io.battlesnake.dsl.Snake'
    }

    baseName = 'starter-snake-kotlin-dsl'
    version = ''

    with jar
}

startScripts.enabled = false

// These tasks create shell scripts that run the apps
task starterSnake(type: CreateStartScripts) {
    mainClassName = 'io.battlesnake.starter.Snake'
    applicationName = 'starter-snake-kotlin'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task starterSnakeDsl(type: CreateStartScripts) {
    mainClassName = 'io.battlesnake.starter.Snake'
    applicationName = 'starter-snake-kotlin-dsl'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(starterSnake)
    from(starterSnakeDsl)
    fileMode = 0755
}
